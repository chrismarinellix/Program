import tkinter as tk
from tkinter import ttk, messagebox
from openpyxl import load_workbook
import warnings

# Suppress openpyxl warnings
warnings.filterwarnings('ignore', category=UserWarning)

# Load Excel Workbook
EXCEL_FILE = "C:\\py\\Program_Management.xlsm"
SHEET_NAME = "Guru"

try:
    wb = load_workbook(EXCEL_FILE, read_only=True, keep_vba=True)
    ws = wb[SHEET_NAME]
except FileNotFoundError:
    messagebox.showerror("File Not Found", f"The file was not found: {EXCEL_FILE}")
    raise
except KeyError:
    messagebox.showerror("Sheet Not Found", f"The sheet '{SHEET_NAME}' was not found in the file.")
    raise
except Exception as e:
    messagebox.showerror("Error Opening File", f"An error occurred: {e}")
    raise

def get_projects():
    """Extract unique project names from column D."""
    projects = set()
    for row in ws.iter_rows(min_row=2, min_col=4, max_col=4, values_only=True):
        if row[0] and isinstance(row[0], str):
            projects.add(row[0])
    return sorted(projects)

def get_tasks(project_name):
    """Get tasks and associated data for a project from columns D, F, and K."""
    tasks = []
    for row in ws.iter_rows(min_row=2, values_only=True):
        if str(row[3]) == project_name:  # Column D (index 3)
            task = row[5]  # Column F (index 5)
            budget = row[10]  # Column K (index 10)
            if task and budget:  # Only add if both task and budget exist
                tasks.append((task, budget))
    return tasks

def update_sums():
    """Update the sum labels for all listboxes."""
    task_sum = calculate_sum(task_listbox)
    from_sum = calculate_sum(from_listbox)
    to_sum = calculate_sum(to_listbox)
    
    task_sum_label.config(text=f"Total: ${task_sum:,.2f}")
    from_sum_label.config(text=f"Total: ${from_sum:,.2f}")
    to_sum_label.config(text=f"Total: ${to_sum:,.2f}")

def load_tasks():
    """Load tasks into the task listbox for the selected project."""
    task_listbox.delete(0, tk.END)
    selected_project = project_var.get()
    if not selected_project:
        messagebox.showwarning("No Project Selected", "Please select a project.")
        return
    try:
        tasks = get_tasks(selected_project)
        for task, budget in tasks:
            task_listbox.insert(tk.END, f"{task} | ${budget:,.2f}")
        update_sums()
    except Exception as e:
        messagebox.showerror("Error Loading Tasks", f"An error occurred: {e}")

def move_task(listbox_from, listbox_to):
    """Move selected tasks between listboxes."""
    selected = listbox_from.curselection()
    for i in selected[::-1]:
        item = listbox_from.get(i)
        listbox_from.delete(i)
        listbox_to.insert(tk.END, item)
    update_sums()

def calculate_sum(listbox):
    """Calculate the sum of budgets in a listbox."""
    total = 0
    for i in range(listbox.size()):
        item = listbox.get(i).split(" | $")
        try:
            total += float(item[1].replace(",", ""))
        except (ValueError, IndexError):
            continue
    return total

def submit():
    """Submit the selected tasks and show a summary."""
    from_tasks = [from_listbox.get(i) for i in range(from_listbox.size())]
    to_tasks = [to_listbox.get(i) for i in range(to_listbox.size())]
    from_total = calculate_sum(from_listbox)
    to_total = calculate_sum(to_listbox)

    email_content = f"""
Budget Reallocation Summary:

FROM TASKS:
{chr(10).join(from_tasks)}

TO TASKS:
{chr(10).join(to_tasks)}

Total FROM Budget: ${from_total:,.2f}
Total TO Budget: ${to_total:,.2f}
"""
    messagebox.showinfo("Email Content", email_content)

# GUI Setup
root = tk.Tk()
root.title("Budget Reallocation Tool")
root.geometry("1400x600")  # Increased window size

# Project Selection Frame
project_frame = ttk.Frame(root)
project_frame.grid(row=0, column=0, columnspan=3, padx=5, pady=5, sticky="ew")

project_label = ttk.Label(project_frame, text="Select Project:")
project_label.pack(side=tk.LEFT, padx=5)

project_var = tk.StringVar()
project_dropdown = ttk.Combobox(project_frame, textvariable=project_var, values=get_projects(), state="readonly", width=50)
project_dropdown.pack(side=tk.LEFT, padx=5)

load_button = ttk.Button(project_frame, text="Load Tasks", command=load_tasks)
load_button.pack(side=tk.LEFT, padx=5)

# Listbox Frames
task_frame = ttk.LabelFrame(root, text="Available Tasks")
task_frame.grid(row=1, column=0, padx=5, pady=5, sticky="nsew")

from_frame = ttk.LabelFrame(root, text="FROM Tasks")
from_frame.grid(row=1, column=1, padx=5, pady=5, sticky="nsew")

to_frame = ttk.LabelFrame(root, text="TO Tasks")
to_frame.grid(row=1, column=2, padx=5, pady=5, sticky="nsew")

# Configure grid weights
root.grid_columnconfigure((0, 1, 2), weight=1)
root.grid_rowconfigure(1, weight=1)

# Listboxes with scrollbars
def create_listbox_with_scrollbar(parent):
    frame = ttk.Frame(parent)
    frame.pack(fill=tk.BOTH, expand=True)
    
    listbox = tk.Listbox(frame, selectmode=tk.MULTIPLE, width=60)
    scrollbar = ttk.Scrollbar(frame, orient="vertical", command=listbox.yview)
    listbox.configure(yscrollcommand=scrollbar.set)
    
    listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    
    return listbox

task_listbox = create_listbox_with_scrollbar(task_frame)
from_listbox = create_listbox_with_scrollbar(from_frame)
to_listbox = create_listbox_with_scrollbar(to_frame)

# Sum Labels
task_sum_label = ttk.Label(task_frame, text="Total: $0.00")
task_sum_label.pack(side=tk.BOTTOM, pady=5)

from_sum_label = ttk.Label(from_frame, text="Total: $0.00")
from_sum_label.pack(side=tk.BOTTOM, pady=5)

to_sum_label = ttk.Label(to_frame, text="Total: $0.00")
to_sum_label.pack(side=tk.BOTTOM, pady=5)

# Button Frame
button_frame = ttk.Frame(root)
button_frame.grid(row=2, column=0, columnspan=3, pady=10)

# Move Buttons
move_from_button = ttk.Button(button_frame, text="Move to FROM ->", command=lambda: move_task(task_listbox, from_listbox))
move_from_button.pack(side=tk.LEFT, padx=5)

move_from_back_button = ttk.Button(button_frame, text="<- Move FROM back", command=lambda: move_task(from_listbox, task_listbox))
move_from_back_button.pack(side=tk.LEFT, padx=5)

move_to_button = ttk.Button(button_frame, text="Move to TO ->", command=lambda: move_task(task_listbox, to_listbox))
move_to_button.pack(side=tk.LEFT, padx=5)

move_to_back_button = ttk.Button(button_frame, text="<- Move TO back", command=lambda: move_task(to_listbox, task_listbox))
move_to_back_button.pack(side=tk.LEFT, padx=5)

# Submit Button
submit_button = ttk.Button(button_frame, text="Submit", command=submit)
submit_button.pack(side=tk.LEFT, padx=20)

root.mainloop()