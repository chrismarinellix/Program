from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QPushButton, QLabel, QTextEdit, QTableWidget, QTableWidgetItem, QAbstractItemView, QWidget, QHeaderView, QMessageBox
from PyQt5.QtCore import Qt, QDate
from PyQt5.QtGui import QColor
import win32com.client
import pythoncom
from pathlib import Path
from datetime import datetime, date, timedelta
import sys
import traceback

class CombinedInvoiceApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Invoice Comment and Reminder Tool")
        self.setGeometry(100, 100, 1400, 800)

        # File path
        self.excel_path = str(Path(r"C:\\Users\\chris.marinelli\\OneDrive - Vysus Group\\Documents - Energy - Power Engineering\\Project Invoices\\Invoice Master Tracker_v1.xlsm"))

        # Excel setup
        self.excel = None
        self.workbook = None
        if not self.initialize_excel():
            sys.exit()

        # UI setup
        self.setup_ui()
        self.load_invoice_data()

    def initialize_excel(self):
        try:
            pythoncom.CoInitialize()
            print("Initializing Excel...")
            try:
                self.excel = win32com.client.GetActiveObject("Excel.Application")
                print("Connected to active Excel instance.")
            except Exception as e:
                print("No active Excel instance found, launching new one.")
                self.excel = win32com.client.Dispatch("Excel.Application")
                self.excel.Visible = False  # Run Excel in background

            try:
                self.workbook = self.excel.Workbooks.Open(self.excel_path)
                print(f"Workbook '{self.excel_path}' opened successfully.")
            except Exception as e:
                print(f"Failed to open workbook: {e}")
                raise
            return True
        except Exception as e:
            print("Error initializing Excel:")
            print(traceback.format_exc())
            return False

    def setup_ui(self):
        self.main_widget = QWidget()
        self.setCentralWidget(self.main_widget)
        main_layout = QHBoxLayout()

        # Left panel: Comment input
        left_layout = QVBoxLayout()
        self.comment_label = QLabel("Enter Comment:")
        left_layout.addWidget(self.comment_label)
        self.comment_input = QTextEdit()
        self.comment_input.setPlaceholderText("Add your comments here...")
        left_layout.addWidget(self.comment_input)

        self.submit_button = QPushButton("Submit Comment")
        self.submit_button.clicked.connect(self.submit_comment)
        left_layout.addWidget(self.submit_button)

        # Right panel: Email preview
        right_layout = QVBoxLayout()
        self.email_label = QLabel("Draft Email:")
        right_layout.addWidget(self.email_label)
        self.email_preview = QTextEdit()
        self.email_preview.setReadOnly(True)
        right_layout.addWidget(self.email_preview)

        # Table in center
        center_layout = QVBoxLayout()
        self.invoice_table = QTableWidget()
        self.invoice_table.setColumnCount(7)
        self.invoice_table.setHorizontalHeaderLabels(["Select", "Invoice Number", "Due Date", "Days Overdue", "Amount", "Client Name", "Last Comment"])
        self.invoice_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.invoice_table.setColumnWidth(5, 300)  # Double the width for Client Name
        self.invoice_table.setSelectionMode(QAbstractItemView.NoSelection)
        center_layout.addWidget(self.invoice_table)

        # Combine layouts
        main_layout.addLayout(left_layout, 2)
        main_layout.addLayout(center_layout, 6)
        main_layout.addLayout(right_layout, 3)

        self.main_widget.setLayout(main_layout)

    def load_invoice_data(self):
        try:
            print("Loading invoice data...")
            sheet = self.workbook.Sheets("Invoice Updates")
            last_row = sheet.Cells(sheet.Rows.Count, "D").End(-4162).Row
            print(f"Found {last_row - 1} rows of data.")

            self.invoice_table.setRowCount(0)
            for row in range(2, last_row + 1):
                try:
                    invoice_number = str(sheet.Cells(row, "D").Value)
                    if invoice_number.startswith("680"):
                        due_date = sheet.Cells(row, "F").Value
                        amount = sheet.Cells(row, "G").Value
                        client_name = str(sheet.Cells(row, "P").Value)
                        client_email = f"{sheet.Cells(row, 'Q').Value or ''} {sheet.Cells(row, 'R').Value or ''}".strip()
                        last_comment = self.get_last_comment(invoice_number)

                        formatted_due_date = self.format_date(due_date)
                        formatted_amount = f"${amount:,.2f}" if amount else "N/A"

                        # Calculate overdue days
                        days_overdue = self.calculate_days_overdue(due_date)
                        overdue_color = QColor("red") if days_overdue > 0 else QColor("black")

                        # Add row to table
                        row_position = self.invoice_table.rowCount()
                        self.invoice_table.insertRow(row_position)

                        # Checkbox column
                        checkbox_item = QTableWidgetItem("‚òê")
                        checkbox_item.setFlags(Qt.ItemIsUserCheckable | Qt.ItemIsEnabled)
                        checkbox_item.setCheckState(Qt.Unchecked)
                        self.invoice_table.setItem(row_position, 0, checkbox_item)

                        # Other columns
                        self.invoice_table.setItem(row_position, 1, QTableWidgetItem(invoice_number))

                        due_date_item = QTableWidgetItem(formatted_due_date)
                        due_date_item.setForeground(overdue_color)
                        self.invoice_table.setItem(row_position, 2, due_date_item)

                        overdue_item = QTableWidgetItem(str(days_overdue))
                        overdue_item.setForeground(overdue_color)
                        self.invoice_table.setItem(row_position, 3, overdue_item)

                        self.invoice_table.setItem(row_position, 4, QTableWidgetItem(formatted_amount))
                        self.invoice_table.setItem(row_position, 5, QTableWidgetItem(client_name))
                        self.invoice_table.setItem(row_position, 6, QTableWidgetItem(last_comment))
                except Exception as e:
                    print(f"Error processing row {row}: {e}")
        except Exception as e:
            print("Error loading invoice data:")
            print(traceback.format_exc())

    def get_last_comment(self, invoice_number):
        try:
            comments_sheet = self.workbook.Sheets("Comments")
            last_row = comments_sheet.Cells(comments_sheet.Rows.Count, "A").End(-4162).Row

            for row in range(last_row, 1, -1):
                if str(comments_sheet.Cells(row, "A").Value) == invoice_number:
                    return str(comments_sheet.Cells(row, "E").Value) or ""
            return ""
        except Exception as e:
            print(f"Error retrieving last comment for invoice {invoice_number}:")
            print(traceback.format_exc())
            return ""

    def format_date(self, excel_date):
        try:
            if excel_date:
                # Excel stores dates as floats, so convert them to a Python date
                excel_base_date = datetime(1899, 12, 30)
                formatted_date = excel_base_date + timedelta(days=int(excel_date))
                return formatted_date.strftime("%d-%b-%Y")
            else:
                return "N/A"
        except Exception as e:
            print(f"Error formatting date {excel_date}: {e}")
            return "N/A"

    def submit_comment(self):
        comment = self.comment_input.toPlainText().strip()
        if not comment:
            print("No comment provided.")
            return

        email_body = ""
        try:
            comments_sheet = self.workbook.Sheets("Comments")
            for row in range(self.invoice_table.rowCount()):
                checkbox = self.invoice_table.item(row, 0).checkState()
                if checkbox == Qt.Checked:
                    invoice_number = self.invoice_table.item(row, 1).text()
                    client_name = self.invoice_table.item(row, 5).text()
                    due_date = self.invoice_table.item(row, 2).text()
                    amount = self.invoice_table.item(row, 4).text()
                    days_overdue = self.invoice_table.item(row, 3).text()

                    next_row = comments_sheet.Cells(comments_sheet.Rows.Count, "A").End(-4162).Row + 1
                    comments_sheet.Cells(next_row, "A").Value = invoice_number
                    comments_sheet.Cells(next_row, "E").Value = comment

                    email_body += (f"Hello,\n\nThis is a friendly reminder that Invoice #{invoice_number} \n"
                                   f"for {client_name} is due on {due_date}.\nAmount: {amount}.\n\n"
                                   f"Please feel free to reach out if you have any questions.\n\nThank you!\n")

            self.workbook.Save()
            QMessageBox.information(self, "Success", "Comments submitted successfully.")
            self.email_preview.setPlainText(email_body)
            self.load_invoice_data()  # Reload to reflect updates
        except Exception as e:
            print("Error submitting comments:")
            print(traceback.format_exc())

if __name__ == "__main__":
    app = QApplication(sys.argv)
    print("Starting application...")
    window = CombinedInvoiceApp()
    window.show()
    sys.exit(app.exec_())
